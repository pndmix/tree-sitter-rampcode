========
Comments
========

-- This is a comment.
/*
This is a comment.
*/

---
(program
  (comment) (comment))


========
Signal
========

$v1

---
(program
  (expression_statement (signal)))


========
Macro
========

$PI

---
(program
  (expression_statement (call_expression (macro_name))))


========
Define-Statement
========

define PI 3.141592;

---
(program
  (define_statement (name) (float)))


========
Expression-Statement
========

sin($v1);
sin($v1 * 2 * 3.1415) * 0.25;

---
(program
  (expression_statement
    (call_expression (function_name) (arguments (signal))))
  (expression_statement
    (binary_operator
      (call_expression (function_name) (arguments
        (binary_operator (binary_operator (signal) (integer)) (float))))
      (float)))
)


========
Hz-Statement
========

hz @ 0.125;
hz : 0.125;

---
(program 
  (hz_statement (reserved_word) (float))
  (hz_statement (reserved_word) (float)))


========
Amp-Statement
========

amp @ 320000;
amp : 320000;

---
(program 
  (amp_statement (reserved_word) (integer))
  (amp_statement (reserved_word) (integer)))


========
Reset-Statement
========

reset;

---
(program 
  (reset_statement))


========
Ramp-Statement
========

ramp @ $v1;
ramp : $v1;

---
(program 
  (ramp_statement (reserved_word) (signal))
  (ramp_statement (reserved_word) (signal)))


========
Channel-Statement
========

l @ $v1%24000 / ($v1%4000/8) % 2 - 0.5;
r @ $v1%24000 / ($v1%4000/8) % 2 - 0.5;

---
(program
  (channel_statement
    (left)
    (reserved_word)
    (binary_operator
      (binary_operator
        (binary_operator
          (binary_operator (signal) (integer))
          (parenthesized (binary_operator (binary_operator (signal) (integer)) (integer))))
        (integer))
      (float)))
  (channel_statement
    (right)
    (reserved_word)
    (binary_operator
      (binary_operator
        (binary_operator
          (binary_operator (signal) (integer))
          (parenthesized (binary_operator (binary_operator (signal) (integer)) (integer))))
        (integer))
      (float)))
)
